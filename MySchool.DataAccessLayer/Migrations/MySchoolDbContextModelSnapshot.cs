// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySchool.DataAccessLayer.Context;

#nullable disable

namespace MySchool.DataAccessLayer.Migrations
{
    [DbContext(typeof(MySchoolDbContext))]
    partial class MySchoolDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LessonStudent", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("LessonId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonStudent");
                });

            modelBuilder.Entity("LessonTeacher", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("LessonId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("LessonTeacher");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Assigment", b =>
                {
                    b.Property<int>("AssigmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssigmentId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssigmentId");

                    b.HasIndex("LessonId");

                    b.ToTable("Assigments");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.AssignmentSubmission", b =>
                {
                    b.Property<int>("AssignmentSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentSubmissionId"));

                    b.Property<int>("AssigmentId")
                        .HasColumnType("int");

                    b.Property<int?>("AssigmentId1")
                        .HasColumnType("int");

                    b.Property<double>("AssigmentScore")
                        .HasColumnType("float");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId1")
                        .HasColumnType("int");

                    b.HasKey("AssignmentSubmissionId");

                    b.HasIndex("AssigmentId");

                    b.HasIndex("AssigmentId1");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentId1");

                    b.ToTable("AssignmentSubmissions");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamId");

                    b.HasIndex("LessonId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.ExamResult", b =>
                {
                    b.Property<int>("ExamResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamResultId"));

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<double>("ExamScore")
                        .HasColumnType("float");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ExamResultId");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonId");

                    b.HasIndex("ClassId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Principal", b =>
                {
                    b.Property<int>("PrincipalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrincipalId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("PrincipalId");

                    b.HasIndex("SchoolId")
                        .IsUnique();

                    b.ToTable("Principals");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("LessonStudent", b =>
                {
                    b.HasOne("MySchool.EntityLayer.Concrete.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MySchool.EntityLayer.Concrete.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonTeacher", b =>
                {
                    b.HasOne("MySchool.EntityLayer.Concrete.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MySchool.EntityLayer.Concrete.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Assigment", b =>
                {
                    b.HasOne("MySchool.EntityLayer.Concrete.Lesson", "Lesson")
                        .WithMany("Assigments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.AssignmentSubmission", b =>
                {
                    b.HasOne("MySchool.EntityLayer.Concrete.Assigment", "Assigment")
                        .WithMany()
                        .HasForeignKey("AssigmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MySchool.EntityLayer.Concrete.Assigment", null)
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("AssigmentId1");

                    b.HasOne("MySchool.EntityLayer.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MySchool.EntityLayer.Concrete.Student", null)
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("StudentId1");

                    b.Navigation("Assigment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Class", b =>
                {
                    b.HasOne("MySchool.EntityLayer.Concrete.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Exam", b =>
                {
                    b.HasOne("MySchool.EntityLayer.Concrete.Lesson", "Lesson")
                        .WithMany("Exams")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.ExamResult", b =>
                {
                    b.HasOne("MySchool.EntityLayer.Concrete.Exam", "Exam")
                        .WithMany("ExamResults")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySchool.EntityLayer.Concrete.Student", "Student")
                        .WithMany("ExamResults")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Lesson", b =>
                {
                    b.HasOne("MySchool.EntityLayer.Concrete.Class", "Class")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Principal", b =>
                {
                    b.HasOne("MySchool.EntityLayer.Concrete.School", "School")
                        .WithOne("Principal")
                        .HasForeignKey("MySchool.EntityLayer.Concrete.Principal", "SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Student", b =>
                {
                    b.HasOne("MySchool.EntityLayer.Concrete.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Teacher", b =>
                {
                    b.HasOne("MySchool.EntityLayer.Concrete.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Assigment", b =>
                {
                    b.Navigation("AssignmentSubmissions");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Class", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Exam", b =>
                {
                    b.Navigation("ExamResults");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Lesson", b =>
                {
                    b.Navigation("Assigments");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Principal")
                        .IsRequired();

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("MySchool.EntityLayer.Concrete.Student", b =>
                {
                    b.Navigation("AssignmentSubmissions");

                    b.Navigation("ExamResults");
                });
#pragma warning restore 612, 618
        }
    }
}
